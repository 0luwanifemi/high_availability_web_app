Description: >
    This template deploys 4 servers (2 in each AZs), a Jump Box
    and a load balancer for project 2

Parameters:

    EnvironmentName:
        Description: An environment name that will be prefixed to resource names
        Type: String
    
    MyIP:
        Description: Limit SSH connection into JumpBox using my current IP 
        Type: String

    JumpboxKey:
        Description: Jumpbox Key Name 
        Type: String

    JumpboxImageID:
        Description: AMI for Jumpbox
        Type: String

    JumpboxInstance:
        Description: Instance Type for Jumpbox
        Type: String

    WebAppAMI:
        Description: AMI for Web Server
        Type: String

    WebAppInstance:
        Description: Web Server Instance Type
        Type: String

Resources:

    JumpBox:
        Type: AWS::EC2::Instance
        Properties:
          KeyName: !Ref JumpboxKey
          ImageId: !Ref JumpboxImageID
          InstanceType: !Ref JumpboxInstance
          NetworkInterfaces:
          - AssociatePublicIpAddress: true
            DeleteOnTermination: true
            Description: jumpbox for troubleshooting
            DeviceIndex: '0'
            SubnetId:
              Fn::ImportValue:
                !Sub "${EnvironmentName}-PUB1-SN"
            GroupSet:
            - !Ref 'JumpboxSG'
          Tags:
          - Key: Name
            Value: !Sub 'Linux bastion ${EnvironmentName}'

    JumpboxSG:
        Type: AWS::EC2::SecurityGroup
        Properties:
          VpcId: 
            Fn::ImportValue:
              !Sub "${EnvironmentName}-VPCID"
          GroupDescription: Enable SSH access via port 22 for JumpBox
          SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: 22
            ToPort: 22
            CidrIp: !Sub '${MyIP}/24'

    WebAppLaunchConfig:
        Type: AWS::AutoScaling::LaunchConfiguration
        Properties:
          UserData:
            Fn::Base64: !Sub |
              #!/bin/bash
              sudo apt-get update -y
              sudo apt-get install apache2 -y
              sudo systemctl start apache2.service
              cd /var/www/html
              sudo curl http://my731023224125bucket.s3.us-east-1.amazonaws.com/index.html -o index.html  
          ImageId: !Ref WebAppAMI 
          SecurityGroups:
          - Ref: WebServerSecGroup
          InstanceType: !Ref WebAppInstance
          BlockDeviceMappings:
          - DeviceName: "/dev/sdk"
            Ebs:
              VolumeSize: '10'

    WebServerSecGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
          GroupDescription: Allow http to our hosts and SSH from local only
          VpcId:
            Fn::ImportValue:
              !Sub "${EnvironmentName}-VPCID"
          SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: 0.0.0.0/0
          - IpProtocol: tcp
            FromPort: 22
            ToPort: 22
            CidrIp: 0.0.0.0/0
          SecurityGroupEgress:
          - IpProtocol: tcp
            FromPort: 0
            ToPort: 65535
            CidrIp: 0.0.0.0/0

    WebAppGroup:
        Type: AWS::AutoScaling::AutoScalingGroup
        Properties:
          VPCZoneIdentifier:
          - Fn::ImportValue: 
              !Sub "${EnvironmentName}-PRIV-NETS"
          LaunchConfigurationName:
            Ref: WebAppLaunchConfig
          MinSize: '4'
          MaxSize: '6'
          TargetGroupARNs:
          - Ref: WebAppTargetGroup

    LBSecGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
          GroupDescription: Allow http to our load balancer
          VpcId:
            Fn::ImportValue:
              !Sub "${EnvironmentName}-VPCID"
          SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: 0.0.0.0/0
          SecurityGroupEgress:
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: 0.0.0.0/0

    WebAppLB:
        Type: AWS::ElasticLoadBalancingV2::LoadBalancer
        Properties:
          Subnets:
          - Fn::ImportValue: !Sub "${EnvironmentName}-PUB1-SN"
          - Fn::ImportValue: !Sub "${EnvironmentName}-PUB2-SN"
          SecurityGroups:
          - Ref: LBSecGroup

    Listener:
        Type: AWS::ElasticLoadBalancingV2::Listener
        Properties:
          DefaultActions:
          - Type: forward
            TargetGroupArn:
              Ref: WebAppTargetGroup
          LoadBalancerArn:
            Ref: WebAppLB
          Port: '80'
          Protocol: HTTP

    WebAppTargetGroup:
        Type: AWS::ElasticLoadBalancingV2::TargetGroup
        Properties:
          HealthCheckIntervalSeconds: 60
          HealthCheckPath: /
          HealthCheckProtocol: HTTP
          HealthCheckTimeoutSeconds: 8
          HealthyThresholdCount: 2
          Port: 80
          Protocol: HTTP
          UnhealthyThresholdCount: 5
          VpcId: 
            Fn::ImportValue:
              Fn::Sub: "${EnvironmentName}-VPCID"

    ELBListenerRule:
        Type: AWS::ElasticLoadBalancingV2::ListenerRule
        Properties:
          Actions:
          - Type: forward
            TargetGroupArn: !Ref 'WebAppTargetGroup'
          Conditions:
          - Field: path-pattern
            Values: [/]
          ListenerArn: !Ref 'Listener'
          Priority: 1      

Outputs:

    LoadBalancerDNS: 
        Description: The DNS of the ALB
        Value:
          Fn::Sub:
            - ${protocol}${url}
            - {url: !GetAtt WebAppLB.DNSName, protocol: http:// }
        Export: 
          Name: !Sub ${EnvironmentName}-LB
